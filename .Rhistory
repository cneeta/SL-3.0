"Animation" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Animation == 1)$title),
selected = sort(subset(search, Animation == 1)$title)[1]),
"Children" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Children == 1)$title),
selected = sort(subset(search, Children == 1)$title)[1]),
"Comedy" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Comedy == 1)$title),
selected = sort(subset(search, Comedy == 1)$title)[1]),
"Crime" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Crime == 1)$title),
selected = sort(subset(search, Crime == 1)$title)[1]),
"Documentary" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Documentary == 1)$title),
selected = sort(subset(search, Documentary == 1)$title)[1]),
"Drama" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Drama == 1)$title),
selected = sort(subset(search, Drama == 1)$title)[1]),
"Fantasy" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Fantasy == 1)$title),
selected = sort(subset(search, Fantasy == 1)$title)[1]),
"Film.Noir" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Film.Noir == 1)$title),
selected = sort(subset(search, Film.Noir == 1)$title)[1]),
"Horror" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Horror == 1)$title),
selected = sort(subset(search, Horror == 1)$title)[1]),
"Musical" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Musical == 1)$title),
selected = sort(subset(search, Musical == 1)$title)[1]),
"Mystery" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Mystery == 1)$title),
selected = sort(subset(search, Mystery == 1)$title)[1]),
"Romance" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Romance == 1)$title),
selected = sort(subset(search, Romance == 1)$title)[1]),
"Sci.Fi" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Sci.Fi == 1)$title),
selected = sort(subset(search, Sci.Fi == 1)$title)[1]),
"Thriller" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Thriller == 1)$title),
selected = sort(subset(search, Thriller == 1)$title)[1]),
"War" =  selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, War == 1)$title),
selected = sort(subset(search, War == 1)$title)[1]),
"Western" = selectInput("select", "Movie of Genre #1",
choices = sort(subset(search, Western == 1)$title),
selected = sort(subset(search, Western == 1)$title)[1])
)
})
output$ui2 <- renderUI({
if (is.null(input$input_genre2))
return()
switch(input$input_genre2,
"Action" = selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Action == 1)$title),
selected = sort(subset(search, Action == 1)$title)[1]),
"Adventure" = selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Adventure == 1)$title),
selected = sort(subset(search, Adventure == 1)$title)[1]),
"Animation" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Animation == 1)$title),
selected = sort(subset(search, Animation == 1)$title)[1]),
"Children" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Children == 1)$title),
selected = sort(subset(search, Children == 1)$title)[1]),
"Comedy" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Comedy == 1)$title),
selected = sort(subset(search, Comedy == 1)$title)[1]),
"Crime" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Crime == 1)$title),
selected = sort(subset(search, Crime == 1)$title)[1]),
"Documentary" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Documentary == 1)$title),
selected = sort(subset(search, Documentary == 1)$title)[1]),
"Drama" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Drama == 1)$title),
selected = sort(subset(search, Drama == 1)$title)[1]),
"Fantasy" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Fantasy == 1)$title),
selected = sort(subset(search, Fantasy == 1)$title)[1]),
"Film.Noir" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Film.Noir == 1)$title),
selected = sort(subset(search, Film.Noir == 1)$title)[1]),
"Horror" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Horror == 1)$title),
selected = sort(subset(search, Horror == 1)$title)[1]),
"Musical" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Musical == 1)$title),
selected = sort(subset(search, Musical == 1)$title)[1]),
"Mystery" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Mystery == 1)$title),
selected = sort(subset(search, Mystery == 1)$title)[1]),
"Romance" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Romance == 1)$title),
selected = sort(subset(search, Romance == 1)$title)[1]),
"Sci.Fi" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Sci.Fi == 1)$title),
selected = sort(subset(search, Sci.Fi == 1)$title)[1]),
"Thriller" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Thriller == 1)$title),
selected = sort(subset(search, Thriller == 1)$title)[1]),
"War" =  selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, War == 1)$title),
selected = sort(subset(search, War == 1)$title)[1]),
"Western" = selectInput("select2", "Movie of Genre #2",
choices = sort(subset(search, Western == 1)$title),
selected = sort(subset(search, Western == 1)$title)[1])
)
})
output$ui3 <- renderUI({
if (is.null(input$input_genre3))
return()
switch(input$input_genre3,
"Action" = selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Action == 1)$title),
selected = sort(subset(search, Action == 1)$title)[1]),
"Adventure" = selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Adventure == 1)$title),
selected = sort(subset(search, Adventure == 1)$title)[1]),
"Animation" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Animation == 1)$title),
selected = sort(subset(search, Animation == 1)$title)[1]),
"Children" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Children == 1)$title),
selected = sort(subset(search, Children == 1)$title)[1]),
"Comedy" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Comedy == 1)$title),
selected = sort(subset(search, Comedy == 1)$title)[1]),
"Crime" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Crime == 1)$title),
selected = sort(subset(search, Crime == 1)$title)[1]),
"Documentary" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Documentary == 1)$title),
selected = sort(subset(search, Documentary == 1)$title)[1]),
"Drama" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Drama == 1)$title),
selected = sort(subset(search, Drama == 1)$title)[1]),
"Fantasy" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Fantasy == 1)$title),
selected = sort(subset(search, Fantasy == 1)$title)[1]),
"Film.Noir" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Film.Noir == 1)$title),
selected = sort(subset(search, Film.Noir == 1)$title)[1]),
"Horror" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Horror == 1)$title),
selected = sort(subset(search, Horror == 1)$title)[1]),
"Musical" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Musical == 1)$title),
selected = sort(subset(search, Musical == 1)$title)[1]),
"Mystery" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Mystery == 1)$title),
selected = sort(subset(search, Mystery == 1)$title)[1]),
"Romance" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Romance == 1)$title),
selected = sort(subset(search, Romance == 1)$title)[1]),
"Sci.Fi" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Sci.Fi == 1)$title),
selected = sort(subset(search, Sci.Fi == 1)$title)[1]),
"Thriller" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Thriller == 1)$title),
selected = sort(subset(search, Thriller == 1)$title)[1]),
"War" =  selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, War == 1)$title),
selected = sort(subset(search, War == 1)$title)[1]),
"Western" = selectInput("select3", "Movie of Genre #3",
choices = sort(subset(search, Western == 1)$title),
selected = sort(subset(search, Western == 1)$title)[1])
)
})
output$table <- renderTable({
movie_recommendation(input$select, input$select2, input$select3)
})
output$dynamic_value <- renderPrint({
c(input$select,input$select2,input$select3)
})
})
setwd("D:/HP-till September-2020/My Office/Project Management/2020-21/Training/SL-2.0/ADVANCED-III/SHINY XGBOOST")
library(tidyverse)
library(caret)
library(randomForest)
library(plotROC)
library(lime)
library(dplyr)
install.packages("caret", dependencies = c("Depends", "Suggests"))
# Load the data and remove NAs
data("PimaIndiansDiabetes2", package = "mlbench")
PimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)
# Inspect the data
sample_n(PimaIndiansDiabetes2, 3)
# Split the data into training and test set
set.seed(123)
training.samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- PimaIndiansDiabetes2[training.samples,]
test.data <- PimaIndiansDiabetes2[-training.samples,]
# Fit the model on the training set
set.seed(123)
model <- train(
diabetes ~ .,
data = train.data,
method = "rf",
trControl = trainControl(
method = "cv",
summaryFunction = twoClassSummary,
classProbs = T,
savePredictions = T
),
importance = TRUE
)
# Best tuning parameter
model$bestTune
# Final model
model$finalModel
model
# Select a parameter setting
selectedIndices <- model$pred$mtry == 2
model_data <- model$pred[selectedIndices,]
roc_plot <-
ggplot(model_data, aes(m = pos, d = factor(obs, levels = c("neg", "pos")))) +
geom_roc(n.cuts = 10) +
geom_rocci(ci.at = quantile(model_data$pos, c(0.2, 0.5, 0.8)), linetype = 1) +
coord_equal() +
style_roc(theme = theme_grey)
roc_plot <-
roc_plot + annotate("text",
x = 0.75,
y = 0.25,
label = paste("AUC =", round((calc_auc(
roc_plot
))$AUC, 4)))
# Make predictions on the test data
predicted.classes <- model %>% predict(test.data)
head(predicted.classes)
# Compute model accuracy rate
mean(predicted.classes == test.data$diabetes)
importance(model$finalModel)
# Plot MeanDecreaseAccuracy
varImpPlot(model$finalModel, type = 1)
# Plot MeanDecreaseGini
varImpPlot(model$finalModel, type = 2)
varImp(model)
plot(varImp(model))
# pregnant Number of times pregnant
# glucose Plasma glucose concentration (glucose tolerance test)
# pressure Diastolic blood pressure (mm Hg)
# triceps Triceps skin fold thickness (mm)
# insulin 2-Hour serum insulin (mu U/ml)
# mass Body mass index (weight in kg/(height in m)\^2)
# pedigree Diabetes pedigree function
# age Age (years)
# diabetes Class variable (test for diabetes)
head(test.data)
hist(test.data$age)
pregnant <- 1
glucose <- 130.1
pressure <- 70.1
triceps <- 30
insulin <- 335
mass <- 30
pedigree <- 0.5
age <- 30.1
example.data <-
data.frame(pregnant,
glucose,
pressure,
triceps,
insulin,
mass,
pedigree,
age)
save(model, file = "model.rda")
cat(predict(model, example.data, type = "prob")[[2]])
install.packages("caret", dependencies = c("Depends", "Suggests"))
### Tidy code
library(tidyr)
medals = data.frame(country = c("Norway", "Germany", "Canada"),
gold = c(14, 14, 11),
silver = c(14, 10, 8),
bronze = c(11, 7, 10)
)
gather(medals, key = Type, value = Medals, -country)
### gapminder
library(tidyverse)
library(gapminder)
groupedData = gapminder %>%
filter(year > 1960) %>%
group_by(continent, year) %>%
summarise(meanLife = mean(lifeExp))
library(tidyverse)
library(caret)
library(randomForest)
library(plotROC)
library(lime)
library(dplyr)
install.packages("caret", dependencies = c("Depends", "Suggests"))
# Load the data and remove NAs
data("PimaIndiansDiabetes2", package = "mlbench")
PimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)
# Inspect the data
sample_n(PimaIndiansDiabetes2, 3)
# Split the data into training and test set
set.seed(123)
training.samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- PimaIndiansDiabetes2[training.samples,]
test.data <- PimaIndiansDiabetes2[-training.samples,]
# Fit the model on the training set
set.seed(123)
model <- train(
diabetes ~ .,
data = train.data,
method = "rf",
trControl = trainControl(
method = "cv",
summaryFunction = twoClassSummary,
classProbs = T,
savePredictions = T
),
importance = TRUE
)
# Best tuning parameter
model$bestTune
# Final model
model$finalModel
model
# Select a parameter setting
selectedIndices <- model$pred$mtry == 2
model_data <- model$pred[selectedIndices,]
roc_plot <-
ggplot(model_data, aes(m = pos, d = factor(obs, levels = c("neg", "pos")))) +
geom_roc(n.cuts = 10) +
geom_rocci(ci.at = quantile(model_data$pos, c(0.2, 0.5, 0.8)), linetype = 1) +
coord_equal() +
style_roc(theme = theme_grey)
roc_plot <-
roc_plot + annotate("text",
x = 0.75,
y = 0.25,
label = paste("AUC =", round((calc_auc(
roc_plot
))$AUC, 4)))
# Make predictions on the test data
predicted.classes <- model %>% predict(test.data)
head(predicted.classes)
# Compute model accuracy rate
mean(predicted.classes == test.data$diabetes)
importance(model$finalModel)
# Plot MeanDecreaseAccuracy
varImpPlot(model$finalModel, type = 1)
# Plot MeanDecreaseGini
varImpPlot(model$finalModel, type = 2)
varImp(model)
plot(varImp(model))
# pregnant Number of times pregnant
# glucose Plasma glucose concentration (glucose tolerance test)
# pressure Diastolic blood pressure (mm Hg)
# triceps Triceps skin fold thickness (mm)
# insulin 2-Hour serum insulin (mu U/ml)
# mass Body mass index (weight in kg/(height in m)\^2)
# pedigree Diabetes pedigree function
# age Age (years)
# diabetes Class variable (test for diabetes)
head(test.data)
hist(test.data$age)
pregnant <- 1
glucose <- 130.1
pressure <- 70.1
triceps <- 30
insulin <- 335
mass <- 30
pedigree <- 0.5
age <- 30.1
example.data <-
data.frame(pregnant,
glucose,
pressure,
triceps,
insulin,
mass,
pedigree,
age)
save(model, file = "model.rda")
cat(predict(model, example.data, type = "prob")[[2]])
install.packages("caret", dependencies = c("Depends", "Suggests"))
# server.R
load('model.rda')
require(shiny)
library(caret)
shinyServer(function(input, output) {
output$roc_plot <-
renderPlot({roc_plot})
output$predicted_diabetes <-
renderText({
features <- data.frame(
pregnant = input$pregnant,
glucose = input$glucose,
pressure = input$pressure,
triceps = input$triceps,
insulin = input$insulin,
mass  = input$mass,
pedigree = input$pedigree,
age = input$age
)
print(features)
paste('Risk of diabetes:',
predict(model, features, type = "prob")[[2]])
})
output$explainer <-
renderPlot({
features <- data.frame(
pregnant = input$pregnant,
glucose = input$glucose,
pressure = input$pressure,
triceps = input$triceps,
insulin = input$insulin,
mass  = input$mass,
pedigree = input$pedigree,
age = input$age
)
explainer <- lime(test.data, model, n_bins = 5)
explanation <- lime::explain(x = features,
explainer = explainer,
n_permutations = 5000,
dist_fun = 'gower',
kernel_width = .75,
n_features = 8,
feature_select = 'highest_weights',
labels = 'pos')
# explanation[, 2:9]
plot_features(explanation, ncol = 1)
})
})
# ui.R
library(shiny)
source('model.r')
shinyUI(fluidPage(
titlePanel("Interactive Model (Risk of Diabetes)"),
sidebarLayout(
sidebarPanel(
p("Shiny Demo App"),
numericInput(
'pregnant',
'Pregnancies',
value = mean(test.data$pregnant),
min = min(test.data$pregnant),
max = max(test.data$pregnant)
),
numericInput(
'glucose',
'Plasma glucose',
value = mean(test.data$glucose),
min = min(test.data$glucose),
max = max(test.data$glucose)
),
numericInput(
'pressure',
'Diastolic pressure',
value = mean(test.data$pressure),
min = min(test.data$pressure),
max = max(test.data$pressure)
),
numericInput(
'triceps',
'Tricep skin fold thickness',
value = mean(test.data$triceps),
min = min(test.data$triceps),
max = max(test.data$triceps)
),
numericInput(
'insulin',
'2 hour serum insulin',
value = mean(test.data$insulin),
min = min(test.data$insulin),
max = max(test.data$insulin)
),
numericInput(
'mass',
'Body mass index',
value = mean(test.data$mass),
min = min(test.data$mass),
max = max(test.data$mass)
),
numericInput(
'pedigree',
'Diabetes pedigree function',
value = mean(test.data$pedigree),
min = min(test.data$pedigree),
max = max(test.data$pedigree)
),
numericInput(
'age',
'Patient Age',
value = mean(test.data$age),
min = min(test.data$age),
max = max(test.data$age)
)
),
mainPanel(h3(textOutput(
"predicted_diabetes"
)),
p(style= 'padding-bottom: 20px'),
hr(),
p(style= 'padding-bottom: 20px'),
plotOutput("roc_plot"),
plotOutput('explainer')
)
)
))
install.packages("caret", dependencies = c("Depends", "Suggests"))
runApp()
install.packages("caret", dependencies = c("Depends", "Suggests"))
